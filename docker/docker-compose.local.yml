services:
  pg:
    image: postgres:16
    container_name: pg
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app123
      POSTGRES_DB: movieflix
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d movieflix || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  app:
    build:
      context: ../app
    container_name: app
    env_file: ../.env
    environment:
      DATABASE_URL: postgres://app:app123@pg:5432/movieflix
      APP_PORT: "3000"
    depends_on:
      pg:
        condition: service_healthy
    ports: ["3000:3000"]
    restart: unless-stopped

  py:
    build:
      context: ..
      dockerfile: docker/Dockerfile.etl
    container_name: py
    environment:
      DATABASE_URL: postgresql+psycopg2://app:app123@pg:5432/movieflix
      DATA_LAKE_DIR: /app/data-lake
      NORMALIZED_DIR: /app/data-lake/normalized_v1
      UVICORN_PORT: "8000"
    volumes:
      - ../:/app
    depends_on:
      pg:
        condition: service_healthy
    ports: ["8000:8000"]
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "wget -qO- http://localhost:8000/api/health || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports: ["80:80"]
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/conf.d-empty:/etc/nginx/conf.d
      - ../web:/usr/share/nginx/html:ro
    depends_on:
      - app
      - py
    restart: unless-stopped

volumes:
  pgdata:
